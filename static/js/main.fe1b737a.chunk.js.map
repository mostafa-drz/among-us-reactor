{"version":3,"sources":["helpers.ts","Left.tsx","Right.tsx","Score.tsx","Timer.tsx","App.tsx","index.tsx"],"names":["getAllIndices","input","search","indices","i","length","push","join","Left","props","secquence","gameOver","started","useState","cells","toString","id","backgroundColor","initCells","setCells","showCell","s","index","setTimeout","useEffect","className","buttons","undefined","style","indexOf","renderButtons","Right","userInput","onClick","Score","score","renderScore","getBackgroundColor","percent","Timer","elapsedPercent","width","App","challenge","setChallenge","setUserInput","setScore","setGameOver","setStarted","time","setTime","timer","useRef","next","Math","round","random","concat","generateNext","current","setInterval","clearInterval","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe1b737a.chunk.js","sourcesContent":["function getAllIndices(input: string[], search: string) {\n  let indices = [];\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === search) indices.push(i);\n  }\n  return indices.join(\",\");\n}\n\nexport { getAllIndices };\n","import { useState, useEffect } from \"react\";\nimport { Cell } from \"./types\";\nimport { getAllIndices } from \"./helpers\";\n\nfunction initCells(): { [id: string]: Cell } {\n  const cells: { [id: string]: Cell } = {};\n  for (let i = 0; i < 9; i++) {\n    cells[i.toString()] = { id: i, backgroundColor: \"var(--black)\" };\n  }\n  return cells;\n}\nfunction Left(props: {\n  secquence: string[];\n  gameOver: boolean;\n  started: boolean;\n}) {\n  const { secquence, gameOver, started } = props;\n  const [cells, setCells] = useState<{ [id: string]: Cell }>(() => initCells());\n  useEffect(() => {\n    for (let i = 0; i < secquence.length; i++) {\n      showCell(secquence[i], i);\n    }\n  }, [secquence]);\n\n  function showCell(s: string, index: number) {\n    setTimeout(() => {\n      setCells((cells) => ({\n        ...cells,\n        [s]: { ...cells[s], backgroundColor: \"red\" },\n      }));\n    }, 500 * (index + 1));\n\n    setTimeout(() => {\n      setCells((cells) => ({\n        ...cells,\n        [s]: { ...cells[s], backgroundColor: \"var(--black)\" },\n      }));\n    }, 500 * (index + 2));\n  }\n\n  function renderButtons() {\n    const buttons = [];\n    for (let i = 0; i < 9; i++) {\n      buttons.push(\n        <div\n          key={`chhalenge-cell-${i}`}\n          className={!started ? \"disabled\" : undefined}\n        >\n          {gameOver ? (\n            <div\n              className=\"button left\"\n              style={{\n                backgroundColor:\n                  secquence.indexOf(i + \"\") !== -1 ? \"green\" : \"var(--gray)\",\n              }}\n            >\n              {secquence.indexOf(i + \"\") !== -1\n                ? getAllIndices(secquence, i + \"\")\n                : \"\"}\n            </div>\n          ) : (\n            <div\n              className=\"button left\"\n              style={{ backgroundColor: cells[i + \"\"].backgroundColor }}\n            />\n          )}\n        </div>\n      );\n    }\n    return buttons;\n  }\n  return <div className=\"container left\">{renderButtons()}</div>;\n}\n\nexport default Left;\n","import { getAllIndices } from \"./helpers\";\n\nfunction Right(props: {\n  onClick: (id: string) => void;\n  gameOver: boolean;\n  userInput: string[];\n  started: boolean;\n}) {\n  const { gameOver, userInput, started } = props;\n  function renderButtons() {\n    const buttons = [];\n    for (let i = 0; i < 9; i++) {\n      buttons.push(\n        <div key={`cell-${i}`} className={!started ? \"disabled\" : undefined}>\n          {gameOver ? (\n            <div\n              className=\"button\"\n              style={{\n                backgroundColor:\n                  userInput.indexOf(i + \"\") !== -1\n                    ? i + \"\" === userInput[userInput.length - 1]\n                      ? \"red\"\n                      : \"green\"\n                    : \"var(--gray)\",\n              }}\n            >\n              {userInput.indexOf(i + \"\") !== -1\n                ? getAllIndices(userInput, i + \"\")\n                : \"\"}\n            </div>\n          ) : (\n            <div className=\"button\" onClick={() => props.onClick(i + \"\")} />\n          )}\n        </div>\n      );\n    }\n    return buttons;\n  }\n  return <div className=\"container\">{renderButtons()}</div>;\n}\n\nexport default Right;\n","function Score(props: { score: number }) {\n  const { score } = props;\n  function renderScore() {\n    let s = [];\n    for (let i = 0; i < score; i++) {\n      s.push(<span key={`score-${i}`} className=\"score\"></span>);\n    }\n    return s;\n  }\n  return <div className=\"score-container\">{renderScore()}</div>;\n}\n\nexport default Score;\n","function Timer(props: { elapsedPercent: number }) {\n  const { elapsedPercent } = props;\n  return (\n    <div className=\"timer\">\n      <div\n        className=\"elapsed-time\"\n        style={{\n          width: `${elapsedPercent}%`,\n          backgroundColor: getBackgroundColor(elapsedPercent),\n        }}\n      />\n    </div>\n  );\n}\n\nfunction getBackgroundColor(percent: number) {\n  if (percent > 60) {\n    return \"#283048\";\n  } else if (percent > 30 && percent < 60) {\n    return \"orange\";\n  } else {\n    return \"red\";\n  }\n}\nexport default Timer;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Left from \"./Left\";\nimport Right from \"./Right\";\nimport Score from \"./Score\";\nimport Timer from \"./Timer\";\n\nfunction App() {\n  const [challenge, setChallenge] = useState<string[]>([]);\n  const [userInput, setUserInput] = useState<string[]>([]);\n  const [score, setScore] = useState<number>(0);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [started, setStarted] = useState<boolean>(false);\n  const [time, setTime] = useState<number>(0);\n  const timer = useRef<any>();\n\n  function handleClick(id: string): void {\n    setUserInput((userInput) => userInput.concat(id));\n  }\n  function handleStart() {\n    setChallenge([]);\n    setUserInput([]);\n    setScore(0);\n    setTime(0);\n    clearInterval(timer.current);\n    setGameOver(false);\n    setStarted(true);\n  }\n  useEffect(() => {\n    if (!started) {\n      return;\n    }\n    function generateNext() {\n      let next: number;\n      do {\n        next = Math.round(Math.random() * 8);\n      } while (next === +challenge[challenge.length - 1]);\n      setChallenge((challenge) => challenge.concat(next + \"\"));\n    }\n    for (let i = 0; i < userInput.length; i++) {\n      if (userInput[i] !== challenge[i]) {\n        setGameOver(true);\n      }\n    }\n    if (userInput.join(\",\") === challenge.join(\",\")) {\n      setUserInput([]);\n      if (challenge.length !== 0) {\n        setScore((score) => score + 1);\n      }\n      if (started) {\n        generateNext();\n      }\n    }\n  }, [userInput, challenge, started]);\n\n  useEffect(() => {\n    if (started) {\n      timer.current = setInterval(() => {\n        setTime((time) => time - 0.01);\n      }, 50);\n    } else if (!started) {\n      clearInterval(timer.current);\n    }\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, [started, challenge]);\n\n  useEffect(() => {\n    setTime(challenge.length);\n  }, [challenge]);\n  useEffect(() => {\n    if (time < 0 && started) {\n      setGameOver(true);\n      clearInterval(timer.current);\n    }\n  }, [time, started]);\n  useEffect(() => {\n    if (gameOver) {\n      setStarted(false);\n    }\n  }, [gameOver]);\n  return (\n    <div className=\"App\">\n      <Timer elapsedPercent={(time / challenge.length) * 100} />\n      <h1>Among us Reactor!</h1>\n      <div>\n        <button\n          disabled={started}\n          onClick={handleStart}\n          className={`btn-start ${started ? \"disabled\" : \"\"}`}\n        >\n          Start\n        </button>\n      </div>\n      {gameOver && (\n        <span className=\"gameover\">Game Over, your score: {score}</span>\n      )}\n      <Score score={score} />\n      <div className=\"platform\">\n        <Left secquence={challenge} gameOver={gameOver} started={started} />\n        <Right\n          onClick={handleClick}\n          gameOver={gameOver}\n          userInput={userInput}\n          started={started}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}